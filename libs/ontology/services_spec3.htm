<html><head><meta http-equiv="Content-Language" content="en-us"><meta http-equiv="Content-Type" content="text/html; charset=windows-1252"><meta name="GENERATOR" content="Microsoft FrontPage 4.0"><meta name="ProgId" content="FrontPage.Editor.Document"><title>New Page 1</title><style>.api_method { font-family: Courier New, Courier, fixed; font-weight:bold; color:#000088; }.api_method_param_val { font-family: Courier New, Courier, fixed; font-weight:bold; font-style:italic; }code { font-family: Courier New, Courier, fixed; font-weight:bold; color:#000088; }.joncomment {	font-family: "Courier New", Courier, monospace;	font-size: 16px;	color: #CC0000;}</style></head><body><h1>Specification for ontology related services</h1><h2>Introduction</h2><p>This describes some common library services for use in web pages that supportontology-related services. This includes query building services, servicesrelated to faceted browser use, ontology browser services, andontology/categorization services around a single object. These services are notthose that support categorization or other back-end processing of metadata intothe database, but rather just the services that leverage the database contentsto get information about the ontology itself, about a set of results, or aboutan individual result.</p><h2>Ontology related services</h2><p>Must include php file X. Leverages existing DB connection from env.php.</p><dl><dt class="api_method">getFacets()</dt><dd>Returns an array of string values that correspond to the names of the  facets. Used both for UI as well as in calling additional methods such as <code>getCategoriesInFacet()</code>.</dd><dt>&nbsp;</dt><dt class="api_method">getCategoriesInFacet( facet:String,  countsWithImages:boolean, retType:String )</dt><dd>Returns information about the categories in the facet indicated by <code>facet</code>  (if <code>facet</code> is not recognized, returns <code>false</code>). If the  passed facet name is &quot;__ALL&quot; then information for all facets will be  returned.&nbsp;<br>  The return value (for valid queries) is an array of objects with the facet  name in a string <code>facet</code> field and an array of category information  <code>items</code>.<br>  Each category item in <code>items</code> has the category name as <code>item.name:String</code> and&nbsp;  <code>item.count:int</code> indicates how  many items in the collection are associated to that category.&nbsp;<br> The <code>countsWithImages</code>  parameter controls whether the entire collection is counted, or only those  items with images. <br>  The <code> retType</code> parameter controls how the information is returned. It must be one  of the following values:	<dl>	<dt class="api_method_param_val">&quot;PHP&quot;</dt>	<dd>Returns a PHP array of structured values (an array of associative      arrays). Each item (pair) has a <code>name</code> and a <code>count</code>      value. If the item has child categories, it will have an additional      non-null value <code>children</code> that is a nested array of the same      structured values.	</dd>    <dt class="api_method_param_val">&quot;JSON&quot;</dt>	<dd>Returns a JSON array variant equivalent to the PHP return value.	</dd>    <dt class="api_method_param_val">&quot;HTML_UL&quot;</dt>	<dd>Returns HTML for the results, using nested unordered lists.</dd>	</dl>    <p class="joncomment">How about making the facet argument optional. If it's present, then return cats for just that facet. If it's present and not recognized, return false. If it's not present, return cats for all the facets.</p></dd><dd>  <p class="joncomment">I'm not sure exactly how it will be useful, but my intutition is to include <span class="api_method">item.id:int</span> as a unique identifier. (I realize all the cats are likely to be uniquely named, but why not). One use might be in making unique html id attributes. Oh, and another use might be in constructing queies for <span class="api_method">queryObjectsAndCategories</span>.</p>  <dl>    <dt>&nbsp;</dt>    </dl></dd><dt class="api_method">getCategoriesForObject( forObjID:int,  countsWithImages:boolean, retType:String )</dt><dd>Returns information about the categories ( in all facets) that are  associated with the object indicated by <code>forObjID</code>.<br>  The return value (for valid queries) is an array of objects with the facet  name in a string <code>facet</code> field and an array of category information  <code>items</code>.<br> Each category  item in <code>items</code> has the category name as <code>item. name</code> and&nbsp;  <code>item. count</code> indicates how  many items in the collection are associated to that category.&nbsp;<br> The <code>countsWithImages</code>  parameter controls whether the entire collection is counted, or only those  items with images. <br>  The <code>catsRetType</code> parameter controls how the information is returned. It  takes the same values as the <code>retType</code> param to <code>getCategoriesInFacet()</code>.  </dd></dl><p class="joncomment">I would suggest adding an optional facet argument to this function as well that would work as described above. Also, if <span class="api_method">item.id</span> sounds like a good idea, add it here too.  Return type &quot;HTML_UL&quot; would need to be able to handle facet names, but I'd rather it not have to. If the performance was comperable, I would rather call getFacets, then run this function for each facet. That would just give me more flexibility in how I delt with facet name data and category data.</p><dl>  <dt>&nbsp;</dt>  <dt class="api_method">queryObjectsAndCategories( cats:int[], kwds:string[],    start:int, pageSize:int,<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  countsWithImages:boolean, catsRetType:String )</dt>  <dd>Builds and executes a query for the passed category IDs in <code>cats</code>    and keywords in <code>kwds</code>, returning results <code>start</code>    through <code>start+pageSize-1</code>.<br>    The <code>countsWithImages</code>    parameter controls whether the entire collection is queried, or only those    items with images. <br>    Returns an object with two member arrays: <code>objects</code> is an array of    result info items, and <code>catsByFacet</code> is an array as is returned by <code>getCategoriesForObject</code>.    Each item in <code>objects </code>includes the following fields: <code>id:int,      objnum:String, name:String, description:String, img_path:String</code>.<br>    The <code>catsRetType</code> parameter controls how the information is returned. It  takes the same values as the <code>retType</code> param to <code>getCategoriesInFacet()</code>.  </dd></dl><p class="joncomment">I assume the two functions of returning objects and returning categories are together here because it makes sense from an implementation and performance standpoint. If that's not the case, it would be a little cleaner to separate out the querying from the fetching of cats (perhaps by allowing <span class="api_method">getCategoriesForObject</span> to accept <span class="api_method">cats:int[]</span> instead of <span class="api_method">cats:int</span>).</p></body></html>