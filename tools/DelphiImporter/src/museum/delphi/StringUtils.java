/**
 *
 */
package museum.delphi;
import java.util.ArrayList;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.*;
import java.io.*;

/**
 * @author Patrick
 *
 */
public class StringUtils {

	protected static int _debugLevel = 1;

	protected static void debug( int level, String str ){
		if( level <= _debugLevel )
			outputDebugStr( str );
	}

	public static void outputDebugStr( String str ){
		System.out.println( str );
	}

	public static void outputExceptionTrace( Exception e ){
        e.printStackTrace( System.out );
	}

	public static String trimQuotes( String str ) {
		int len = str.length();
		String ret;
		if( str.charAt(0) == '"' ) {
			if( str.charAt(len-1) == '"' )
				ret = str.substring(1, len-1);
			else
				ret = str.substring(1, len);
		} else if( str.charAt(len-1) == '"' )
			ret = str.substring(0, len-1);
		else
			return str;
		debug( 2, "trimQuotes mapping ["+str+"] to ["+ret+"]");
		return ret;
	}

	public static String buildLineFromTokens( ArrayList<String> tokens, int sepChar ){
		StringBuilder sb = new StringBuilder();
		boolean fFirst = true;
		for( String str:tokens ) {
			if( fFirst )
				fFirst = false;
			else
				sb.append(sepChar);
			sb.append(str);
		}
		return sb.toString();
	}

	public static String outputXMLStringForNode( Element el ) {
		try {
	    // Use a Transformer for output
		TransformerFactory tFactory =
	    TransformerFactory.newInstance();
		Transformer transformer = tFactory.newTransformer();

		DOMSource source = new DOMSource(el);
		StringWriter writer = new StringWriter();
		StreamResult result = new StreamResult(writer);
		transformer.setOutputProperty(OutputKeys.METHOD, "html");
		transformer.transform(source, result);
		return writer.toString();
		} catch (TransformerConfigurationException tce) {
		  // Error generated by the parser
		  System.out.println ("* Transformer Factory error");
		  System.out.println("  " + tce.getMessage() );

		   // Use the contained exception, if any
		  Throwable x = tce;
		  if (tce.getException() != null)
		    x = tce.getException();
		  x.printStackTrace();
		} catch (TransformerException te) {
		  // Error generated by the parser
		  System.out.println ("* Transformation error");
		  System.out.println("  " + te.getMessage() );

		  // Use the contained exception, if any
		  Throwable x = te;
		  if (te.getException() != null)
		    x = te.getException();
		  x.printStackTrace();
		}
		return null;
	}

	public static String getBaseDirForPath( String path ) {
		// Find last slash or backslash (to allow for windows paths), to get basepath
    	int iSlash = Math.max(path.lastIndexOf('/'), path.lastIndexOf('\\'));
    	return ( iSlash>0 )? path.substring(0, iSlash+1):null;
	}

}
